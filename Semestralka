// Online C++ compiler to run C++ program online
#include <iostream>
#include <map>
#include <vector>
#include <algorithm>
using namespace std;

class Matrix
{
    public:
    
    map <array<int, 2>, long double> newmap;
    
    void set()
    {
    newmap[{1,1}]=5;
    newmap[{1,2}]=-4;
    newmap[{2,1}]=-4;
    newmap[{2,2}]=5;
    newmap[{3,3}]=0.1;

    }

    void printed()
    {
    map <array<int, 2>, long double>:: iterator itern=newmap.begin();
    
    for(int j=0; itern!=newmap.end(); itern++,j++)
    {
    cout<<itern->first[0]<<" "<<itern->first[1]<<" "<<itern->second<<endl;
    }    
    
    }
   
    
};

class Vektor
{
    
    public:
    map <int, long double> newmap;

    void set()
    {
    newmap[1]=1;
    newmap[2]=2;
    newmap[3]=3;

    }
    void setN()
    {
    newmap[1]=0;
    newmap[2]=0;
    }
    void setP()
    {
    newmap[1]=110;
    newmap[2]=-111;
    newmap[3]=22;

    }

    void printed()
    {
    map <int, long double>:: iterator itern=newmap.begin();
    
    for(int j=0; itern!=newmap.end(); itern++,j++)
    {
    cout<<itern->first<<" "<<itern->second<<endl;
    }    
    
    }
   
        
};
    
Vektor operator*(Matrix a, Vektor b)
{  
        Vektor c;
        
        map <array<int, 2>,long double>:: iterator it=a.newmap.begin();
    
        long double pom=0;
    
        for(int j=0; it!=a.newmap.end(); it++,j++)
        {
        pom=(it->second)*b.newmap[it->first[1]];
        //cout<<(it->second)<<"*"<<b.newmap[it->first[1]]<<"="<<pom<<endl;
        c.newmap[it->first[0]]+=pom;
        }    

        return c;
}
    
long double operator*(Vektor a, Vektor b)
{
        long double c=0;
        map <int, long double>:: iterator it=a.newmap.begin();
        
        for(int j=0; it!=a.newmap.end(); it++,j++)
        {
        c=c+(it->second)*b.newmap[it->first];
        }
        return c;
        
}

Vektor operator*(long double a, Vektor b)
{
        Vektor c;
        
        map <int,long double>:: iterator it=b.newmap.begin();
    
        long double pom=0;
    
        for(int j=0; it!=b.newmap.end(); it++,j++)
        {
        pom=a*(it->second);
        c.newmap[it->first]=pom;
        }    
        
    
        return c;
        
}


Vektor operator-(Vektor a, Vektor b)
{
        Vektor c;
        
        
        map <int, long double>:: iterator it1=a.newmap.begin();
        map <int, long double>:: iterator it2=b.newmap.begin();
        
        vector <long double> pom; //pomocny vektor prvku ktere se zucastnili operace
        long double p; //pomocny prvek pro rozdil
  
        for(int j=0; it1!=a.newmap.end(); it1++,j++)
        {
            
        p=(it1->second)-b.newmap[it1->first];
        c.newmap[it1->first]=p;
        
        pom.push_back(it1->first);
        
        }    
        
        long double key=0;    
        for(int j=0; it2!=b.newmap.end(); it2++,j++)
        {
    
        key=it2->first;
            if (find(pom.begin(), pom.end(), key) != pom.end()) {}
            else {c.newmap[it2->first]=-it2->second;}    
    
        }    

        
        return c;
}
Vektor operator+(Vektor a, Vektor b)
{
        Vektor c;
        
        
        map <int, long double>:: iterator it1=a.newmap.begin();
        map <int,long double>:: iterator it2=b.newmap.begin();
        
        vector <long double> pom; //pomocny vektor prvku ktere se zucastnili operace
       long double p; //pomocny prvek pro rozdil
  
        for(int j=0; it1!=a.newmap.end(); it1++,j++)
        {
            
        p=(it1->second)+b.newmap[it1->first];
        c.newmap[it1->first]=p;
        
        pom.push_back(it1->first);
        
        }    
        
        long double key=0;    
        for(int j=0; it2!=b.newmap.end(); it2++,j++)
        {
    
        key=it2->first;
            if (find(pom.begin(), pom.end(), key) != pom.end()) {}
            else {c.newmap[it2->first]=it2->second;}    
    
        }    

        
        return c;
}

int main() {
    
    Matrix A;
    Vektor r,x0,p,z,x,b,null_v;
    long double alfa,beta,lrr,rr;
    
    int n=3;
    
    A.set();
    x0.setP();
    b.set();
    
    null_v.setN();
  
    r=b-(A*x0);
    lrr=r*r;
    p=r;
    x=x0;

    
    for(int k=1; k<=n; k++)
    {
        z=A*p;
        
        alfa=lrr/(p*z);

        x=x+(alfa*p); 

        r=r-(alfa*z); 

        rr=r*r;
        
        beta=rr/lrr;
        
        lrr=rr;
  
        p=r+(beta*p);
    }

    x.printed();
    

    
    return 0;
}
