// Online C++ compiler to run C++ program online
#include <iostream>
#include <map>
#include <vector>
#include <algorithm>
using namespace std;

class Matrix
{
    public:
    
    map <array<int, 2>, double> newmap;
    
    void set()
    {
    newmap[{1,1}]=11;
    newmap[{2,2}]=22;
    newmap[{3,3}]=33;
    newmap[{4,4}]=44;
    newmap[{5,5}]=55;
    newmap[{6,6}]=66;
    }

    void printed()
    {
    map <array<int, 2>, double>:: iterator itern=newmap.begin();
    
    for(int j=0; itern!=newmap.end(); itern++,j++)
    {
    cout<<itern->first[0]<<" "<<itern->first[1]<<" "<<itern->second<<endl;
    }    
    
    }
   
    
};

class Vektor
{
    
    public:
    map <int, double> newmap;

    void set()
    {
    newmap[1]=11;
    newmap[2]=22;
    newmap[3]=33;
    newmap[4]=44;
    newmap[5]=55;
    newmap[6]=66;
    }

    void printed()
    {
    map <int, double>:: iterator itern=newmap.begin();
    
    for(int j=0; itern!=newmap.end(); itern++,j++)
    {
    cout<<itern->first<<" "<<itern->second<<endl;
    }    
    
    }
   
        
};
    
Vektor nasobeni(Matrix a, Vektor b)
{
        Vektor c;
        
        map <array<int, 2>, double>:: iterator it=a.newmap.begin();
    
        double pom=0;
    
        for(int j=0; it!=a.newmap.end(); it++,j++)
        {
        pom=(it->second)*b.newmap[it->first[1]];
        c.newmap[it->first[0]]=pom;
        }    
        
    
        return c;
}
    
    
    
double nasobeni(Vektor a, Vektor b)
{
        double c=0;
        map <int, double>:: iterator it=a.newmap.begin();
        
        for(int j=0; it!=a.newmap.end(); it++,j++)
        {
        c=c+(it->second)*b.newmap[it->first];
        }
        return c;
        
}
    
Vektor rozdil(Vektor a, Vektor b)
{
        Vektor c;
        
        
        map <int, double>:: iterator it1=a.newmap.begin();
        map <int, double>:: iterator it2=b.newmap.begin();
        
        vector <double> pom; //pomocny vektor prvku ktere se zucastnili operace
        double p; //pomocny prvek pro rozdil
  
        for(int j=0; it1!=a.newmap.end(); it1++,j++)
        {
            
        p=(it1->second)-b.newmap[it1->first];
        c.newmap[it1->first]=p;
        
        pom.push_back(it1->first);
        
        }    
        
        double key=0;    
        for(int j=0; it2!=b.newmap.end(); it2++,j++)
        {
    
        key=it2->first;
            if (find(pom.begin(), pom.end(), key) != pom.end()) {}
            else {c.newmap[it2->first]=-it2->second;}    
    
        }    

        
        return c;
}

int main() {
    
    Matrix m;
    m.set();
   // m.printed();
    Vektor v;
    v.set();
    v.printed();
    
    Vektor c;
    c=nasobeni(m,v);
    c.printed();
    
    double f;
    f=nasobeni(c,v);
    cout<<f<<endl;
    
    
    /*
    vector <double> vek={1};
    cout<<vek[0];
    vek.push_back(120);
    cout<<vek[1]<<endl;
    
    
    double key=120;
    if (find(vek.begin(), vek.end(), key) != vek.end()) {
        cout << "Element found";
    }
    else {
        cout << "Element not found";
    }
    */
    
    Vektor k;
    k=rozdil(v,c);
    k.printed();
    
    
    
    return 0;
}
